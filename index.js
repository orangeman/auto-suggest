// Generated by CoffeeScript 1.10.0
(function() {
  var cumulativeDelayed;

  module.exports = function(div, autosuggest, defaultValue, onSelect) {
    var hide, input, render, select, show, slt, suggest, text, titleCase;
    suggest = div.getElementsByClassName("suggest")[0];
    hide = function() {
      return suggest.style.display = "none";
    };
    show = function() {
      if (suggest.innerHTML !== "") {
        return suggest.style.display = "block";
      }
    };
    input = div.getElementsByTagName("input")[0];
    if (defaultValue) {
      input.value = defaultValue;
    }
    input.onblur = function() {
      return setTimeout((function() {
        return hide();
      }), 300);
    };
    input.onclick = function() {
      if (suggest.style.display === "none") {
        return show();
      }
    };
    slt = null;
    text = "";
    select = function(s) {
      if (s) {
        input.value = s.textContent;
      }
      if (s) {
        text = s.textContent;
      }
      onSelect();
      if (slt != null) {
        slt.className = "";
      }
      slt = null;
      return hide();
    };
    suggest.onclick = function(e) {
      return select(e.target);
    };
    input.onkeydown = function(e) {
      var end, k, start;
      switch (k = e.charCode || e.keyCode || 0) {
        case 27:
          hide();
          break;
        case 13:
          select(slt);
          break;
        case 38:
          if (slt != null) {
            slt.className = "";
          }
          slt = slt != null ? slt.previousSibling : void 0;
          if (!slt) {
            return hide();
          }
          slt.className = "selected";
          if (slt.offsetTop - suggest.scrollTop < slt.offsetHeight) {
            suggest.scrollTop = slt.offsetTop - slt.offsetHeight;
          }
          break;
        case 40:
          if (!slt) {
            slt = suggest.firstChild;
          } else {
            slt.className = "";
            if (slt.nextSibling) {
              slt = slt.nextSibling;
            }
          }
          if (slt != null) {
            slt.className = "selected";
          }
          suggest.scrollTop = (slt != null ? slt.offsetTop : void 0) - suggest.offsetHeight * 1.03;
          show();
          break;
        case 37:
          return;
        case 39:
          return;
        case 33:
          return;
        case 34:
          return;
        case 35:
          return;
        case 36:
          return;
        case 91:
          return;
        case 93:
          return;
        case 225:
          return;
        case 20:
          return;
        case 17:
          return;
        case 18:
          return;
        case 16:
          return;
        case 9:
          return;
        default:
          if (!text || k === 70) {
            text = "";
          }
          start = input.selectionStart;
          end = input.selectionEnd;
          if (k === 8) {
            if (start === end) {
              start = start - 1;
            }
            text = text.slice(0, start) + text.slice(end);
          } else if (k === 46) {
            if (start === end) {
              end = end + 1;
            }
            text = text.slice(0, start) + text.slice(end);
          } else {
            text = text.slice(0, start) + String.fromCharCode(k).toLowerCase() + text.slice(end);
          }
          text = titleCase(text);
          console.log("PRESS key=" + String.fromCharCode(k) + " code=" + e.keyCode + " text=" + text + "   caret " + input.selectionStart);
          if (text.length > 0) {
            autosuggest(text, render);
          } else {
            hide();
          }
      }
      return true;
    };
    input.oninput = function(e) {
      if (text.toLowerCase() !== input.value.toLowerCase()) {
        text = titleCase(input.value);
        if (text.length > 0) {
          return autosuggest(text, render);
        } else {
          return hide();
        }
      }
    };
    render = function(names) {
      if (names.length === 0 || names[0] === "") {
        suggest.innerHTML = "";
        return hide();
      } else {
        suggest.innerHTML = names.map(function(rest) {
          return "<a>" + text + "<span>" + rest + "</span></a>";
        }).join('');
        return show();
      }
    };
    titleCase = function(str) {
      if (str.length > 0) {
        return str[0].toUpperCase() + str.slice(1, +(str.length - 1) + 1 || 9e9);
      } else {
        return "";
      }
    };
    return function() {
      return titleCase(input.value.trim());
    };
  };

  cumulativeDelayed = function() {
    var args, fn, timeout, tld;
    tld = null;
    args = Array.prototype.slice.call(arguments);
    fn = args.shift();
    timeout = args.shift();
    return function() {
      var _args, tid;
      _args = args.concat(Array.prototype.slice.call(arguments));
      if (tid) {
        clearTimeout(tid);
      }
      return tid = setTimeout((function() {
        return fn.apply(null, _args);
      }), timeout);
    };
  };

}).call(this);
